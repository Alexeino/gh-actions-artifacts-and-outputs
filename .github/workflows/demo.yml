name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # Cache the .npm where node-modules is cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # Dynamic Key, hashFiles(filename) generates hash and if file content changed hash changes as well.
      - name: Install dependencies
        run: npm ci # If ~/.npm exists then it will use that if don't then it will run the installation by creating a new ~/.npm folder
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish-filename.outputs.script-file }} # Referencing the script-file ouput from steps context
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # Cache the .npm where node-modules is cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # Dynamic Key, hashFiles(filename) generates hash and if file content changed hash changes as well.
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS file name
        id: publish-filename # Step identifier which is generating the output
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';' # This will write the js filename inside the file whose path is at $GITHUB_OUTPUT
      - name: Upload artifact
        uses: actions/upload-artifact@v4 # Using official action provided by Github to upload artifact
        with:
          name: dist-files # Identifier to later use these uploaded artifacts in subsequent jobs
          path: |
            dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files # Identifier used while uploading the artifact
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}" # Using output value
      - name: Deploy
        run: echo "Deploying..."